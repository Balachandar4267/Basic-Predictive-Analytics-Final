# -*- coding: utf-8 -*-
"""LVADSUSR74_BALACHANDAR G_LAB4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OsEx82OCZ6hmJtIzHwJ24wqjtT7Ufqy1
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import accuracy_score
from sklearn.cluster import KMeans
from sklearn.model_selection import train_test_split
from sklearn.ensemble import IsolationForest  # for removing outliers
from sklearn.metrics import roc_curve,auc
from sklearn.preprocessing import StandardScaler

df = pd.read_csv("/content/sample_data/social_network.csv")
df.info()

#checking for null values
df.isnull().sum()

#checking for duplicates
df.duplicated().sum()

#detecting outliers
plt.figure(figsize=(20,12))
sns.boxplot(data = df)
plt.title("Detecting Outliers")
plt.show()

df.head()

df.drop("account_creation_date",axis = 1,inplace =True)

df.head()

#Converting Categorical values to Numeric values
df_dummy = pd.get_dummies(df,columns = ["account_status"])
df_dummy.head()

#Dropping unwanted columns
df_dummy.drop("account_status_inactive",axis = 1,inplace = True)
df_dummy.head()

df_55=pd.DataFrame(df_dummy)

iso = IsolationForest(contamination=0.1)
outliers = iso.fit_predict(df_55[' residential_assets_value'].values.reshape(1,-1))

df_dummy['login_activity']

#selecting features for anamoly detection
features = df_dummy[['login_activity','posting_activity','social_connections']]

X = pd.DataFrame(features)
model = IsolationForest()

#selecting features for anamoly detection
features = df_dummy[['login_activity','posting_activity','social_connections']]

# Create a new dataframe with the selected features
X = pd.DataFrame(features)
y = df_dummy["suspicious_activity"]
X_train,X_test,y_train,y_test = train_test_split(X,y,test_size = 0.3,random_state = 42)

model = IsolationForest()

model.fit(X)

# Predict the anomalies in the data
y_pred = model.predict(X_test)

# Add the predicted anomaly scores to the original dataframe
df_dummy["anomaly_score"] = model.decision_function(X)

anomalies = df.loc[df_dummy["anomaly_score"] < 0]

# predict
x=df_dummy[["login_activity", "posting_activity", "social_connections"]]
df_values=x.values

find=df_values

result=[]
for i in find:
  z=model.predict([i])
  if z==[1]:
    result.append('Not Anomaly')
  elif z==[-1]:
    result.append('Anomaly')

df_dummy['Anomaly']=result
print(df_dummy)

# Create a scatter plot of suspicious activity vs social connections

plt.scatter(df_dummy["social_connections"], df_dummy["anomaly_score"], label="Not Anomaly")
#plt.scatter(anomalies["social_connections"], anomalies["anomaly_score"], color="r", label="Anomaly")
plt.xlabel("Social Connections")
plt.ylabel("anomaly_score")
plt.legend()
plt.show()