# -*- coding: utf-8 -*-
"""LVADSUSR74 _BALACHANDAR G_LAB1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jqjN8oBySC1MjWMn1ZH-8iwJErjAB1nu
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.ensemble import IsolationForest
from sklearn.metrics import accuracy_score,f1_score,recall_score,confusion_matrix

df = pd.read_csv("/content/sample_data/loan_approval.csv")
df.info()
df.head()

#checking for null values
df.isnull().sum()

#checking for duplicates
df.duplicated().sum()

#detecting outliers
plt.figure(figsize=(20,12))
sns.boxplot(data = df)
plt.title("Detecting Outliers")
plt.show()

#removing outliers
df_55=pd.DataFrame(df)

iso = IsolationForest(contamination=0.1)
outliers = iso.fit_predict(df_55[' residential_assets_value'].values.reshape(1,-1))

dd=df.drop(df_55.iloc[np.where(outliers== -1)].index,inplace=False)

#visualisation after removing outliers
plt.figure(figsize=(20,12))
sns.boxplot(data = dd)
plt.title("Removed Outliers")
plt.show()

dd.info()

df_dummy = pd.get_dummies(dd,columns=[" education"," self_employed"," loan_status"])
df_dummy.head()

df_dummy.drop(" education_ Graduate",axis =1,inplace = True)
df_dummy.drop(" self_employed_ No",axis =1,inplace = True)
df_dummy.drop(" loan_status_ Approved",axis =1,inplace = True)

df_dummy.head()

df_dummy.drop(" no_of_dependents",inplace = True,axis =1)
df_dummy.head()

df_dummy.drop(" commercial_assets_value",inplace =True,axis =1)
df_dummy.drop(" luxury_assets_value",inplace =True,axis =1)

X =df_dummy[[" income_annum"," loan_amount"," loan_term"," cibil_score"]]
y = df_dummy[" loan_status_ Rejected"]

#Random Forest
clf = RandomForestClassifier()

X_train,X_test,y_train,y_test = train_test_split(X,y,test_size =0.3,random_state = 42)
clf.fit(X_train,y_train)
a_pre = clf.predict(X_test)
a = accuracy_score(y_test,a_pre)

#Decision Tree
clf = DecisionTreeClassifier()

X_train,X_test,y_train,y_test = train_test_split(X,y,test_size =0.3,random_state = 42)
clf.fit(X_train,y_train)
ab_pre = clf.predict(X_test)
b= accuracy_score(y_test,ab_pre)

#Checking Accuracy Score
x=['Random Forest','Decision Tree']
y = [a,b]
plt.bar(x,y,color = 'g')
plt.title("Accuracy of the model")
plt.xlabel("Models")
plt.ylabel("Accuracy Score")
plt.grid(False)
plt.show()